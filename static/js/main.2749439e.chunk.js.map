{"version":3,"sources":["base/Navbar.js","getCSRF.js","tweets/TweetCreate.js","tweets/LikeBtn.js","tweets/RetweetBtn.js","tweets/TweetList.js","tweets/Tweets.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","id","className","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","TweetCreate","useState","error","setError","csrftoken","getCSRF","onSubmit","event","preventDefault","myForm","target","myFormData","URLSearchParams","FormData","fetch","method","headers","body","then","response","status","json","Error","reset","handleTweet","action","type","value","htmlFor","cols","rows","placeholder","required","LikeBtn","props","onClick","tweetId","url","request","alert","handleLike","tweetLikes","RetweetBtn","TweetList","tweets","map","tweet","key","is_retweet","retweet","content","likes","Tweets","setTweets","isLoaded","setIsLoaded","useEffect","data","Fragment","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2749439e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <header id=\"main-header\">\r\n      <div className=\"container flexed\">\r\n        <h1 className=\"cursor clicked\">TweetMe</h1>\r\n        <nav className=\"nav-bar flexed\">\r\n          <h3 className=\"nav-btn cursor clicked\">Home</h3>  \r\n          <h3 className=\"nav-btn cursor clicked\">Contact</h3>  \r\n        </nav>     \r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\n\r\nexport default Navbar","const getCookie = function (name) {\r\n  let cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n      const cookies = document.cookie.split(';');\r\n      for (let i = 0; i < cookies.length; i++) {\r\n          const cookie = cookies[i].trim();\r\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n              break;\r\n          }\r\n      }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\nexport default getCookie","import React, {useState} from 'react'\r\nimport getCSRF from './../getCSRF'\r\n\r\n\r\nconst TweetCreate = () => {\r\n  const [error, setError] = useState(false)\r\n  const csrftoken = getCSRF('csrftoken')\r\n\r\n  const handleTweet = (event) => {\r\n    event.preventDefault()\r\n    const myForm = event.target\r\n    // const url = myForm.action\r\n    const url = 'http://127.0.0.1:8000/api/tweets/create/'\r\n    const myFormData = new URLSearchParams(new FormData(myForm))\r\n    const request = {\r\n      method: 'POST',\r\n      headers: {\r\n        'X-CSRFToken': csrftoken,\r\n      },\r\n      body: myFormData\r\n    }\r\n\r\n    fetch(url, request)\r\n      .then(response => {\r\n        if(response.status === 201) {\r\n            return response.json()\r\n        }\r\n\r\n        if(response.status === 400) {\r\n            throw new Error('Try a shorter tweet')\r\n        }\r\n\r\n        if(response.status === 403) {\r\n            throw new Error('Login first to perform this action')\r\n        }        \r\n      })\r\n      .then(\r\n        () => {\r\n          myForm.reset()\r\n        }, \r\n        (error) => {\r\n          myForm.reset()\r\n          setError(true)\r\n        } \r\n      )  \r\n  }\r\n \r\n  return (\r\n    <form onSubmit={(event) => handleTweet(event)} method=\"POST\" action=\"api/tweets/create\" id=\"tweet-create-form\" className=\"form-container\">\r\n      <input type=\"hidden\" name=\"csrfmiddlewaretoken\" value={csrftoken}></input>\r\n      <div className=\"form-item\">\r\n        <label htmlFor=\"id_content\">Content: </label>\r\n        <textarea name=\"content\" id=\"id_content\" cols=\"50\" rows=\"7\" placeholder=\"Your tweet...\" required={true}></textarea>\r\n      </div>\r\n      {error && <div className=\"form-item\">Error</div>}\r\n      <div className=\"form-item\">\r\n        <button type=\"submit\" className=\"prim-btn cursor\">Tweet</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\n\r\nexport default TweetCreate","import React from 'react'\r\nimport getCSRF from './../getCSRF'\r\n\r\n\r\nconst LikeBtn = (props) => {\r\n\tconst handleLike = (tweetId) => {\r\n\t\tconst url = `http://127.0.0.1:8000/api/tweets/${tweetId}/like/`\r\n\t\tconst request = {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t\t'X-CSRFToken': getCSRF('csrftoken'),\r\n\t\t\t},\r\n\t\t}\r\n\r\n\t\tfetch(url, request)\r\n\t\t\t.then(response => {\r\n\t\t\t\tif(response.status === 200) {\r\n\t\t\t\t\talert('ok')\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(response.status === 403) {\r\n\t\t\t\t\tthrow new Error('Login first to perform this action')\r\n\t\t\t\t}\r\n\r\n\t\t\t})\r\n\t\t\t.then(\r\n\t\t\t\t() => {}, \r\n\t\t\t\t(error) => {\r\n\t\t\t\t\talert(error)\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t}\r\n\r\n  return (\r\n    <button onClick={() => handleLike(props.tweetId)} className=\"prim-btn tweet-container-item cursor\">\r\n      {props.tweetLikes} likes\r\n    </button>\r\n  )\r\n}\r\n\r\n\r\nexport default LikeBtn","import React from 'react'\r\n\r\n\r\nconst RetweetBtn = () => {\r\n  return (\r\n    <button className=\"prim-btn tweet-container-item cursor\">\r\n      retweet\r\n    </button>\r\n  )\r\n}\r\n\r\n\r\nexport default RetweetBtn","import React from 'react'\r\nimport LikeBtn from './LikeBtn'\r\nimport Retweetbtn from './RetweetBtn'\r\n\r\n\r\nconst TweetList = (props) => {\r\n  return ( \r\n    <section id=\"tweets-container\">    \r\n      {props.tweets.map((tweet) => (\r\n        <article key={tweet.id} className=\"tweet-container\">\r\n          <h3 className=\"tweet-container-item\">\r\n            {tweet.id} {'->'} \r\n            {tweet.is_retweet && tweet.retweet.content}\r\n            {!tweet.is_retweet && tweet.content}\r\n          </h3>\r\n          <LikeBtn tweetId={tweet.id} tweetLikes={tweet.likes} />\r\n          <Retweetbtn />\r\n        </article>\r\n      ))}   \r\n    </section>\r\n  )\r\n}\r\n\r\n\r\nexport default TweetList","import React, {useState, useEffect} from 'react'\r\nimport './Tweets.css'\r\nimport TweetCreate from './TweetCreate'\r\nimport TweetList from './TweetList'\r\n\r\n\r\nconst Tweets = () => {\r\n  const [tweets, setTweets] = useState([])\r\n  const [error, setError] = useState(false)\r\n  const [isLoaded, setIsLoaded] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const url = 'http://127.0.0.1:8000/api/tweets/'\r\n    const request = {\r\n      method: 'get',\r\n      headers: {\r\n        'X-Requested-With': 'XMLHttpRequest', \r\n        'Content-Type': \"application/json\", \r\n        'Accept': \"application/json\"\r\n      }\r\n    }\r\n\r\n    fetch(url, request)\r\n      .then((response) => {\r\n        if(response.status === 200) {\r\n          return response.json()\r\n        }\r\n      })\r\n      .then(\r\n        (data) => {\r\n          setIsLoaded(true)\r\n          setTweets(data)\r\n        },\r\n        (error) => {\r\n          setIsLoaded(true)\r\n          setError(true)\r\n        }\r\n      )\r\n    }, []) \r\n    \r\n  return (\r\n    <React.Fragment>\r\n      <TweetCreate />\r\n      {!isLoaded && <h1 className=\"message\">Loading</h1>}\r\n      {error && <h1 className=\"message\">Error</h1>}\r\n      {!error && <TweetList tweets={tweets} />}\r\n    </React.Fragment>\r\n    \r\n  )\r\n}\r\n\r\n\r\nexport default Tweets","import React from 'react';\nimport './App.css';\nimport './variables.css'\nimport Navbar from './base/Navbar';\nimport Tweets from './tweets/Tweets'\n\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Navbar />\n      <main id=\"page-container\">\n        <Tweets />\n      </main>\n    </React.Fragment>  \n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}