{"version":3,"sources":["base/Logout.js","base/Navbar.js","messages/Message.js","tweets/TweetCreate.js","tweets/LikeBtn.js","tweets/RetweetBtn.js","tweets/TweetList.js","tweets/Tweets.js","base/Base.js","base/Login.js","profiles/profile.js","App.js","serviceWorker.js","index.js"],"names":["Logout","onClick","localStorage","removeItem","className","Navbar","props","id","to","isAuthenticated","Message","propClass","message","TweetCreate","useState","content","setContent","error","setError","errorMsg","setErrorMsg","onSubmit","e","event","preventDefault","data","request","method","headers","Authorization","getItem","body","JSON","stringify","fetch","then","response","status","onTweetAdd","json","Error","catch","handleTweet","action","htmlFor","name","cols","rows","placeholder","required","value","onChange","target","type","LikeBtn","tweetLikes","likes","setLikes","isLiked","setIsLiked","tweetId","url","alert","handleLike","RetweetBtn","console","log","handleRetweet","TweetList","tweets","map","tweet","key","is_retweet","retweet","Tweets","setTweets","isLoaded","setIsLoaded","isTweetAdded","setIsTweetAdded","useEffect","Fragment","Base","Login","username","setUserName","password","setPassword","setItem","access","handleLogin","Profile","userData","setUserData","useParams","App","setIsAuthenticated","myToken","token","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dab87a6a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Logout = () => {\r\n\tconst handleLogout = () => {\r\n    localStorage.removeItem('token')\r\n\t}\r\n\r\n  return (\r\n    <h3 onClick={() => handleLogout()} className=\"nav-btn cursor clicked\">Logout</h3> \r\n  )\r\n}\r\n\r\n\r\nexport default Logout\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport Logout from './Logout'\r\n\r\n\r\nconst Navbar = (props) => {\r\n  return (\r\n    <header id=\"main-header\">\r\n      <div className=\"container flexed\">\r\n        <Link to='/'><h1 className=\"cursor clicked\">TwitterClone</h1></Link>\r\n        <nav className=\"nav-bar flexed\">\r\n          <Link to='/home'><h3 className=\"nav-btn cursor clicked\">Home</h3></Link>\r\n          <Link to='#'><h3 className=\"nav-btn cursor clicked\">Contact</h3></Link>\r\n          {!props.isAuthenticated && <Link to='/Login'><h3 className=\"nav-btn cursor clicked\">Login</h3></Link>}\r\n          {props.isAuthenticated && <Logout />}  \r\n        </nav>     \r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\nimport './Messages.css'\r\n\r\n\r\nconst Message = (props) => {\r\n  return (\r\n    <p className={props.propClass}>{props.message}</p>\r\n  )\r\n}\r\n\r\n\r\nexport default Message","import React, {useState} from 'react'\r\nimport Message from './../messages/Message'\r\n\r\n\r\nconst TweetCreate = (props) => {\r\n  const [content, setContent] = useState('')\r\n  const [error, setError] = useState(false)\r\n  const [errorMsg, setErrorMsg] = useState(null)\r\n\r\n  const handleTweet = (event) => {\r\n    event.preventDefault()\r\n   \r\n    const data = {\r\n      content: content\r\n    }\r\n   \r\n    const url = 'http://127.0.0.1:8000/api/tweets/create/'\r\n    const request = {\r\n      method: 'POST',\r\n      headers: {  \r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${localStorage.getItem('token')}` \r\n      },\r\n      body: JSON.stringify(data)\r\n    }\r\n\r\n    fetch(url, request)\r\n      .then(response => {   \r\n        if(response.status === 201) {\r\n          props.onTweetAdd()\r\n          return response.json()\r\n        }\r\n\r\n        if(response.status === 400) {\r\n          throw new Error('Try a shorter tweet')\r\n        }\r\n\r\n        if(response.status === 401) {\r\n          throw new Error('Login first to perform this action')\r\n        }        \r\n      })\r\n      .then(() => {\r\n        setContent('') \r\n      })\r\n      .catch((error) => {\r\n        setContent('')\r\n        setError(true)\r\n        setErrorMsg(error.message)\r\n      })\r\n  }\r\n \r\n  return (\r\n    <form onSubmit={(e) => handleTweet(e)} action=\"\" method=\"POST\" id=\"tweet-create-form\" className=\"form-container\">\r\n      <div className=\"form-item\">\r\n        <label htmlFor=\"id_content\">Content: </label>\r\n        <textarea name=\"content\" id=\"id_content\" cols=\"50\" rows=\"7\" placeholder=\"Your tweet...\" required={true} value={content} onChange={e => setContent(e.target.value)}></textarea>\r\n      </div>\r\n      {error && <div className=\"form-item\">{<Message propClass='failure' message={errorMsg} />}</div>}\r\n      <div className=\"form-item\">\r\n        <button type=\"submit\" className=\"prim-btn cursor\">Tweet</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\n\r\nexport default TweetCreate","import React, {useState} from 'react'\r\n\r\n\r\nconst LikeBtn = (props) => {\r\n  const [likes, setLikes] = useState(props.tweetLikes)\r\n  const [isLiked, setIsLiked] = useState(props.isLiked)\r\n\r\n\tconst handleLike = (tweetId) => {\r\n\t\tconst url = `http://127.0.0.1:8000/api/tweets/${tweetId}/like/`\r\n\t\tconst request = {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: `Bearer ${localStorage.getItem('token')}`\r\n      }   \r\n\t\t}\r\n\r\n\t\tfetch(url, request)\r\n\t\t\t.then(response => {\r\n\t\t\t\tif(response.status === 200) {\r\n\t\t\t\t\treturn response.json()\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(response.status === 401) {\r\n\t\t\t\t\tthrow new Error('Login first to perform this action')\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((data) => {\r\n        data.type==='like'? setLikes(likes+ 1): setLikes(likes- 1) \r\n        data.type==='like'? setIsLiked(true): setIsLiked(false) \r\n      })\r\n\t\t\t.catch(error => {\r\n        alert(error)\r\n      })\r\n\t}\r\n\r\n  return (\r\n    <button onClick={() => handleLike(props.tweetId)} className=\"prim-btn tweet-container-item cursor\">\r\n      {!isLiked && likes + ' likes'} \r\n      {isLiked && likes + ' liked'} \r\n    </button>\r\n  )\r\n}\r\n\r\n\r\nexport default LikeBtn","import React from 'react'\r\n\r\n\r\nconst RetweetBtn = (props) => {\r\n  const handleRetweet = (tweetId) => {\r\n    const url = `http://127.0.0.1:8000/api/tweets/${tweetId}/retweet/`\r\n    const request = {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: `Bearer ${localStorage.getItem('token')}`\r\n      }\r\n    }\r\n\r\n    fetch(url, request)\r\n      .then(response => {\r\n        if(response.status === 201) {\r\n          return \r\n        }\r\n      })\r\n      .catch(error => console.log(error))\r\n  }\r\n\r\n  return (\r\n    <button onClick={() => handleRetweet(props.tweetId)} className=\"prim-btn tweet-container-item cursor\">\r\n      retweet\r\n    </button>\r\n  )\r\n}\r\n\r\n\r\nexport default RetweetBtn","import React from 'react'\r\nimport LikeBtn from './LikeBtn'\r\nimport Retweetbtn from './RetweetBtn'\r\n\r\n\r\nconst TweetList = (props) => {\r\n  return ( \r\n    <section id=\"tweets-container\">    \r\n      {props.tweets.map((tweet) => (\r\n        <article key={tweet.id} className=\"tweet-container\">\r\n          <h3 className=\"tweet-container-item\">\r\n            {tweet.id} {'->'} \r\n            {tweet.is_retweet && tweet.retweet.content}\r\n            {!tweet.is_retweet && tweet.content}\r\n          </h3>\r\n          <LikeBtn tweetId={tweet.id} tweetLikes={tweet.likes} isLiked={tweet.isLiked} />\r\n          <Retweetbtn tweetId={tweet.id} />\r\n        </article>\r\n      ))}   \r\n    </section>\r\n  )\r\n}\r\n\r\n\r\nexport default TweetList","import React, {useState, useEffect} from 'react'\r\nimport './Tweets.css'\r\nimport TweetCreate from './TweetCreate'\r\nimport TweetList from './TweetList'\r\n\r\n\r\nconst Tweets = () => {\r\n  const [tweets, setTweets] = useState([])\r\n  const [error, setError] = useState(false)\r\n  const [isLoaded, setIsLoaded] = useState(false)\r\n  const [isTweetAdded, setIsTweetAdded] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const url = 'http://127.0.0.1:8000/api/tweets/'\r\n    const request = {\r\n      method: 'get',\r\n      headers: {\r\n        'X-Requested-With': 'XMLHttpRequest', \r\n        'Content-Type': \"application/json\", \r\n        'Accept': \"application/json\",\r\n        Authorization: `Bearer ${localStorage.getItem('token')}`\r\n      }\r\n    }\r\n\r\n    fetch(url, request)\r\n      .then((response) => {\r\n        if(response.status === 200) {\r\n          return response.json()\r\n        }\r\n      })\r\n      .then(data => {\r\n        setIsLoaded(true)\r\n        setTweets(data)\r\n      })\r\n      .catch(error => {\r\n        setIsLoaded(true)\r\n        setError(true)\r\n        console.log(error);\r\n      })\r\n    }, [isTweetAdded])\r\n    \r\n    const onTweetAdd = () => {\r\n      setIsTweetAdded(!isTweetAdded)\r\n    }\r\n    \r\n  return (\r\n    <React.Fragment>\r\n      <TweetCreate onTweetAdd={onTweetAdd} />\r\n      {!isLoaded && <h1 className=\"message\">Loading</h1>}\r\n      {error && <h1 className=\"message\">Error</h1>}\r\n      {!error && <TweetList tweets={tweets} />}\r\n    </React.Fragment>\r\n    \r\n  )\r\n}\r\n\r\n\r\nexport default Tweets","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport './Base.css'\r\n\r\n\r\nconst Base = () => {\r\n  return (\r\n    <main id=\"welcome\">\r\n      <div id=\"join-us\">     \r\n        <Link to='/login'><h1 >Join Us</h1></Link>\r\n      </div>\r\n    </main>\r\n  )\r\n}\r\n\r\n\r\nexport default Base","import React, {useState} from 'react'\r\n\r\n\r\nconst Login = () => {\r\n  const [username, setUserName] = useState('')\r\n  const [password, setPassword] = useState('')\r\n\r\n  \r\n  const handleLogin = (event) => {\r\n    event.preventDefault()\r\n\r\n    const data = {\r\n      username: username,\r\n      password: password\r\n    }\r\n    \r\n    const url = 'http://127.0.0.1:8000/api/profiles/token/'\r\n    const request = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data)\r\n    }\r\n\r\n    fetch(url, request)\r\n      .then(response => {\r\n        if(response.status === 200) {\r\n          return response.json()\r\n        }\r\n\r\n        if(response.status === 400) {\r\n          throw new Error('')\r\n        }\r\n      })\r\n      .then((data) => {\r\n        localStorage.setItem('token', data.access)\r\n      })\r\n      .catch(error => console.log(error))\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={e => handleLogin(e)} action=\"\" method=\"POST\" className=\"form-container\">\r\n      <div className=\"form-item\">\r\n        <h1>Log In</h1>\r\n      </div>\r\n      <div className=\"form-item\">\r\n        <label htmlFor=\"id_username\">Username</label>\r\n        <input type=\"text\" name=\"username\" id=\"id_username\" value={username} onChange={e => setUserName(e.target.value)}/>\r\n      </div>\r\n      <div className=\"form-item\">\r\n        <label htmlFor=\"id_password\">Password</label>\r\n        <input type=\"password\" name=\"password\" id=\"id_password\" value={password} onChange={e => setPassword(e.target.value)}/>\r\n      </div>\r\n      <div className=\"form-item\">\r\n        <input type=\"submit\" value=\"Log In\" className=\"prim-btn cursor\"/>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\n\r\nexport default Login","import React, {useState, useEffect} from 'react'\r\nimport {useParams} from 'react-router-dom'\r\n\r\n\r\n\r\nconst Profile = () => {\r\n  const [userData, setUserData] = useState({})\r\n  const {id} = useParams()\r\n\r\n  useEffect(() => {\r\n    const url = `http://127.0.0.1:8000/api/profiles/${id}/`\r\n    const request = {\r\n      method: 'GET',\r\n      headers: {\r\n        Authorization: `Bearer ${localStorage.getItem('token')}`\r\n      }\r\n    }\r\n\r\n    fetch(url, request)\r\n      .then(response => {\r\n        if(response.status === 200) {\r\n          return response.json()\r\n        }\r\n      })\r\n      .then(data => setUserData(data))\r\n      .catch(error => console.log(error))\r\n  }, [id])\r\n\r\n  return (\r\n  <h1>{userData.username}</h1>\r\n  )\r\n}\r\n\r\n\r\nexport default Profile","import React, {useState, useEffect} from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport './App.css';\nimport './variables.css'\nimport Navbar from './base/Navbar';\nimport Tweets from './tweets/Tweets'\nimport Base from './base/Base'\nimport Login from './base/Login'\nimport Profile from './profiles/profile'\n\n\nfunction App() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\n  \n  useEffect(() => {\n    const myToken = localStorage.getItem('token')\n\n    const url = 'http://127.0.0.1:8000/api/profiles/token/verify/'\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({token: myToken})\n    }\n    fetch(url, request)\n      .then(response => {\n        if(response.status === 401) {\n          localStorage.removeItem('token')\n        }\n      })\n\n    if(myToken) {\n      setIsAuthenticated(true)\n    }\n  }, [])\n\n  \n  return (\n    <Router>\n      <Switch>  \n        <Route exact path='/'>\n          <Base />  \n        </Route>\n        <Route exact path='/login'>\n          <Navbar isAuthenticated={isAuthenticated} />\n          <main id=\"page-container\">\n            <Login />\n          </main> \n        </Route>\n        <Route exact path='/home'>\n          <Navbar isAuthenticated={isAuthenticated} />\n          <main id=\"page-container\">\n            <Tweets /> \n          </main>   \n        </Route>\n        <Route exact path='/profile/:id'>\n          <Navbar isAuthenticated={isAuthenticated} />\n          <main id=\"page-container\">\n            <Profile />\n          </main>   \n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}